import logging
import sqlite3

from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from keyboards import inline
from utils.states import UserStates


router = Router()
logger = logging.getLogger(__name__)



def get_user_from_db(user_id: int):
    """–ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    with sqlite3.connect("data/database.db") as db:
        cursor = db.cursor()
        cursor.execute("SELECT * FROM users WHERE id = ?", (user_id,))
        return cursor.fetchone()
    


def check_mutual_like(cursor, from_user_id: int, to_user_id: int):
    """–ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∞–π–∫–Ω—É–ª–∏ –ª–∏ –∞–Ω–∫–µ—Ç—É –≤–∑–∞–∏–º–Ω–æ"""
    cursor.execute(
        "SELECT 1 FROM likes WHERE from_user_id = ? AND to_user_id = ?", 
        (to_user_id, from_user_id))
    return cursor.fetchone()



def save_like(cursor, from_user_id: int, to_user_id: int):
    """—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–∞–π–∫–∏"""
    cursor.execute(
        "INSERT OR IGNORE INTO likes (from_user_id, to_user_id) VALUES (?, ?)", 
        (from_user_id, to_user_id)
    )



async def send_user_profile(bot: Bot, chat_id: int, user_data: tuple):
    """–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await bot.send_photo(
        chat_id=chat_id,
        photo=user_data[6],
        caption=f"{user_data[1]}, {user_data[2]}, {user_data[4]} - {user_data[5]}",
        reply_markup=inline.get_rating_kb(user_data[0])
    )



@router.callback_query(F.data == 'dislike')
async def dislike(callback: CallbackQuery, bot: Bot):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    
    try:
        with sqlite3.connect("data/database.db") as db:
            cursor = db.cursor()

            cursor.execute(
                'SELECT * FROM users WHERE id != ? ORDER BY RANDOM() LIMIT 1', 
                (callback.message.from_user.id,))
        
            question = cursor.fetchone()

            await callback.message.answer_photo(
                photo=question[6], 
                caption=f"{question[1]}, {question[2]}, {question[4]} - {question[5]}", 
                reply_markup=inline.get_rating_kb(question[0])
            )

    except Exception as e:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", exc_info=True)



@router.callback_query(F.data.startswith('anonymous_message:'))
async def anonymous_message_waiting(callback: CallbackQuery, bot: Bot, state: FSMContext):
    to_user_id = int(callback.data.split(":")[1])
    await state.update_data(to_user_id=to_user_id)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(UserStates.waiting_for_anonymous_message)



@router.message(UserStates.waiting_for_anonymous_message)
async def user_anonymous_message(message: Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        to_user_id = data['to_user_id']
        from_user_id = message.from_user.id
        
        with sqlite3.connect("data/database.db") as db:
            cursor = db.cursor()

            cursor.execute("SELECT * FROM users WHERE id = ?", (from_user_id,))
            from_user_data = cursor.fetchone()
            
            if not from_user_data:
                await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            await bot.send_message(to_user_id, f"üîí –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}")
            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    finally:
        await state.clear()



@router.callback_query(F.data.startswith('message:'))
async def message_waiting(callback: CallbackQuery, bot: Bot, state: FSMContext):
    to_user_id = int(callback.data.split(":")[1])
    await state.update_data(to_user_id=to_user_id)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(UserStates.waiting_for_message)



@router.message(UserStates.waiting_for_message)
async def user_message(message: Message, state: FSMContext, bot: Bot):
    try:
        data = await state.get_data()
        to_user_id = data['to_user_id']
        from_user_id = message.from_user.id

        with sqlite3.connect("data/database.db") as db:
            cursor = db.cursor()

            from_user_data = get_user_from_db(from_user_id)

            await message.answer("–í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å:")
            await send_user_profile(bot, to_user_id, from_user_data)
            await bot.send_message(to_user_id, f"—Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}")

            mutual = check_mutual_like(cursor, from_user_id, to_user_id)
            save_like(cursor, from_user_id, to_user_id)
            db.commit()

            if mutual:
                to_user_data = get_user_from_db(to_user_id)     
                if to_user_data:
                    await bot.send_message(
                        from_user_id,
                        f"üíû –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å {to_user_data[1]}!\n"
                        f"–ù–∞–ø–∏—Å–∞—Ç—å: [–ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–∫—É](tg://user?id={to_user_data[0]})", parse_mode="Markdown"
                    )
                    await bot.send_message(
                        to_user_id,
                        f"üíû –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å {from_user_data[1]}!\n"
                        f"–ù–∞–ø–∏—Å–∞—Ç—å: [–ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–∫—É](tg://user?id={from_user_data[0]})", parse_mode="Markdown"
                    )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await state.clear()



@router.callback_query(F.data.startswith('like:'))
async def like(callback: CallbackQuery, bot: Bot):
    try:
        from_user_id = callback.from_user.id
        to_user_id = int(callback.data.split(":")[1])
        
        with sqlite3.connect("data/database.db") as db:
            cursor = db.cursor()

            from_user_data = get_user_from_db(from_user_id)

            mutual = check_mutual_like(cursor, from_user_id, to_user_id)
            save_like(cursor, from_user_id, to_user_id)
            db.commit()

            if mutual:
                to_user_data = get_user_from_db(to_user_id)
                if to_user_data:
                    await bot.send_message(
                        from_user_id,
                        f"üíû –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å {to_user_data[0]}!\n"
                        f"–ù–∞–ø–∏—Å–∞—Ç—å: [–ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–∫—É](tg://user?id={to_user_id})", parse_mode="Markdown"
                    )
                    await bot.send_message(
                        to_user_id,
                        f"üíû –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å {from_user_data[1]}!\n"
                        f"–ù–∞–ø–∏—Å–∞—Ç—å: [–ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–∫—É](tg://user?id={from_user_id})", parse_mode="Markdown"
                    )

        await callback.answer("‚úÖ –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=False)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")