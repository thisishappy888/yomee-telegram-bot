from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from keyboards import inline
from aiogram.types import Message
from aiogram.fsm.context import FSMContext

from utils.states import UserStates

import logging

import sqlite3

router = Router()

logger = logging.getLogger(__name__)


@router.callback_query(F.data == 'dislike')
async def dislike(callback: CallbackQuery, bot: Bot):
    message_id_to_delete = callback.message.message_id
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=message_id_to_delete)
    
    try:
        with sqlite3.connect("data/database.db") as db:
            cursor = db.cursor()

            cursor.execute('SELECT * FROM users WHERE id != ? ORDER BY RANDOM() LIMIT 1', (callback.message.from_user.id,))
        
            question = cursor.fetchone()

            await callback.message.answer_photo(photo=question[6], caption=f"{question[1]}, {question[2]}, {question[4]} - {question[5]}", reply_markup=inline.get_rating_kb(question[0]))

    except Exception as e:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", exc_info=True)



@router.callback_query(F.data.startswith('anonymous_message:'))
async def message_waiting(callback: CallbackQuery, bot: Bot, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    to_user_id = int(callback.data.split(":")[1])
    await state.update_data(to_user_id=to_user_id)
    
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    await state.set_state(UserStates.waiting_for_message)


@router.message(UserStates.waiting_for_message)
async def user_message(message: Message, state: FSMContext, bot: Bot):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        to_user_id = data['to_user_id']
        from_user_id = message.from_user.id
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with sqlite3.connect("data/database.db") as db:
            cursor = db.cursor()

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            cursor.execute("SELECT * FROM users WHERE id = ?", (from_user_id,))
            from_user_data = cursor.fetchone()
            
            if not from_user_data:
                await message.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            await bot.send_message(
                chat_id=to_user_id,
                text=f"üîí –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}"
            )

            await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    finally:
        await state.clear()



@router.callback_query(F.data.startswith('like:'))
async def like(callback: CallbackQuery, bot: Bot):
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from_user_id = callback.from_user.id
        to_user_id = int(callback.data.split(":")[1])
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with sqlite3.connect("data/database.db") as db:
            cursor = db.cursor()

            # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            cursor.execute("SELECT * FROM users WHERE id = ?", (from_user_id,))
            from_user_data = cursor.fetchone()
            
            if not from_user_data:
                await callback.answer("‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return

            # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            await bot.send_photo(
                chat_id=to_user_id,
                photo=from_user_data[6],
                caption=f"{from_user_data[1]}, {from_user_data[2]}, {from_user_data[4]} - {from_user_data[5]}",
                reply_markup=inline.get_rating_kb(from_user_data[0])
            )

            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
            cursor.execute("""
                SELECT 1 FROM likes 
                WHERE from_user_id = ? AND to_user_id = ?
            """, (to_user_id, from_user_id))
            
            mutual_like_exists = cursor.fetchone()

            # 4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∞–π–∫ –≤ –±–∞–∑—É
            cursor.execute("""
                INSERT OR IGNORE INTO likes (from_user_id, to_user_id)
                VALUES (?, ?)
            """, (from_user_id, to_user_id))
            db.commit()

            # 5. –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫ - —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö
            if mutual_like_exists:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                cursor.execute("SELECT * FROM users WHERE id = ?", (to_user_id,))
                to_user_data = cursor.fetchone()
                
                if to_user_data:
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏
                    await bot.send_message(
                        from_user_id,
                        f"üíû –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å {to_user_data[0]}!\n"
                        f"–ù–∞–ø–∏—Å–∞—Ç—å: [–ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–∫—É](tg://user?id={to_user_id})", parse_mode="Markdown"
                    )
                    
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é –æ –≤–∑–∞–∏–º–Ω–æ–π —Å–∏–º–ø–∞—Ç–∏–∏
                    await bot.send_message(
                        to_user_id,
                        f"üíû –í–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –í—ã –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å {from_user_data[1]}!\n"
                        f"–ù–∞–ø–∏—Å–∞—Ç—å: [–ø–µ—Ä–µ–π—Ç–∏ –≤ –ª–∏—á–∫—É](tg://user?id={from_user_id})", parse_mode="Markdown"
                    )

        await callback.answer("‚úÖ –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", show_alert=False)

    except ValueError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∞–π–∫", show_alert=True)